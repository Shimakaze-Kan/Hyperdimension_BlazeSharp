@page "/forum/{taskid:guid}"
@inject NavigationManager NavigationManager
@inject ViewModels.IForumViewModel ForumViewModel

<div class="row">
    <h5 class="cursor-pointer" @onclick="GoBackToTaskPlayground"><span class="oi oi-arrow-left"></span> Back to task</h5>
    <button class="btn btn-outline-orange ml-auto" disabled="@(!canSubmitComment)" @onclick="ShowNewCommentDialog">New Comment</button>
</div>

<div class="container mt-5">

    @if (ForumViewModel.Comments is not null)
    {
        @foreach (var comment in ForumViewModel.Comments)
        {
            <Comment AvatarUrl="@comment.AvatarUrl"
                     UserName="@comment.UserName"
                     CommentId="@comment.Id"
                     Date="@comment.Date"
                     Text="@comment.Text"
                     IsSubcomment="false"
                     CanReply="@canSubmitComment"
                     OnReply="@(() => SetMainCommentIdAndShowSubcommentDialog(comment.Id))" />

            @if (comment.Subcomments is not null)
            {
                @foreach (var subcomment in comment.Subcomments)
                {
                    <Comment AvatarUrl="@subcomment.AvatarUrl"
                             UserName="@subcomment.UserName"
                             CommentId="@subcomment.MainCommentId"
                             Date="@subcomment.Date"
                             Text="@subcomment.Text"
                             IsSubcomment="true"
                             CanReply="@canSubmitComment"
                             OnReply="@(() => SetMainCommentIdAndShowSubcommentDialog(comment.Id))" />
                }
            }
            <div class="mb-5"></div>
        }
    }
    else
    {
        <Spinner />
    }
</div>

@if (showingNewCommentDialog)
{
    <NewCommentDialog CommentCreateRequest="ForumViewModel.CommentCreateRequest"
                      ProfanityScannerResponse="ForumViewModel.ProfanityScannerResponse"
                      SendInappropriate="ForumViewModel.SendInappropriate"
                      OnCancel="ShowNewCommentDialog"
                      OnConfirm="OnConfirmNewComment" />
}
@if (showingNewSubcommentDialog)
{
    <NewSubcommentDialog SubcommentCreateRequest="ForumViewModel.SubcommentCreateRequest"
                         ProfanityScannerResponse="ForumViewModel.ProfanityScannerResponse"
                         SendInappropriate="ForumViewModel.SendInappropriate"
                         OnCancel="ShowNewSubcommentDialog"
                         OnConfirm="OnConfirmNewSubcomment" />
}

@code {
    [Parameter]
    public Guid TaskId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    bool showingNewCommentDialog = false;
    bool showingNewSubcommentDialog = false;
    bool canSubmitComment = false;


    protected override async Task OnInitializedAsync()
    {
        ForumViewModel.TaskId = TaskId;
        await ForumViewModel.GetComments();
        canSubmitComment = (await AuthenticationState).User.Identity.IsAuthenticated;
    }

    private void GoBackToTaskPlayground()
    {
        NavigationManager.NavigateTo($"/TaskContainer/{TaskId}");
    }

    private void ShowNewCommentDialog()
    {
        showingNewCommentDialog = !showingNewCommentDialog;
    }

    private void ShowNewSubcommentDialog()
    {
        showingNewSubcommentDialog = !showingNewSubcommentDialog;
    }

    private async Task OnConfirmNewComment()
    {
        await ForumViewModel.CheckComment();

        if (ForumViewModel.SendInappropriate.Value || !ForumViewModel.ProfanityScannerResponse.IsInappropriate)
        {
            ShowNewCommentDialog();
            await ForumViewModel.CreateNewComment();
            ForumViewModel.SendInappropriate.Value = false;
            ForumViewModel.ProfanityScannerResponse = new();
        }
    }

    private async Task OnConfirmNewSubcomment()
    {

        await ForumViewModel.CheckSubcomment();

        if (ForumViewModel.SendInappropriate.Value || !ForumViewModel.ProfanityScannerResponse.IsInappropriate)
        {
            ShowNewSubcommentDialog();
            await ForumViewModel.CreateNewSubcomment();
            ForumViewModel.SendInappropriate.Value = false;
            ForumViewModel.ProfanityScannerResponse = new();
        }
    }

    private void SetMainCommentIdAndShowSubcommentDialog(Guid id)
    {
        ForumViewModel.SubcommentCreateRequest.MainCommentId = id;
        ShowNewSubcommentDialog();
    }
}
