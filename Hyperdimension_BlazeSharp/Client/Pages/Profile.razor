@page "/profile"
@page "/profile/{userId:guid}"
@layout NoPaddingLayout
@using Hyperdimension_BlazeSharp.Client.ViewModels
@inject IProfileViewModel _profileViewModel

<div class="bg-banner" style="background-image: url('../img/@_profileViewModel.Banner')" />
<div class="d-flex flex-column px-4">
    <div class="p-2 d-flex flex-column flex-sm-row">
        <img src="@(_profileViewModel.UserProfile?.AvatarUrl)" class="rounded mx-sm-0 mx-auto avatar" alt="...">
        <div class="p-2 ml-2">
            <span class="badge bg-dark text-white bol">Points: @_profileViewModel.UserProfile?.Points</span>
            <h4 class="bg-lightergrey rounded p-2 my-auto text-center">@(_profileViewModel.UserProfile?.Email)</h4>
        </div>
    </div>

    @if (_profileViewModel.UserProfile?.About is not null)
    {
        <div class="container-fluid py-2 my-3 rounded bg-lightergrey">
            <span class="pb-2 h3">About</span><br />
            <span>@_profileViewModel.UserProfile?.About</span>
        </div>
    }


    <div class="list-group mt-4">
        <a href="#" class="list-group-item list-group-item-action active">
            User's history
        </a>
        @if (_profileViewModel.UserProfile?.Tasks is not null)
        {
            @foreach (var task in _profileViewModel.UserProfile.Tasks)
            {
                <a href="@($"taskcontainer/{task.Guid}")" class="list-group-item list-group-item-action">@task.Title @task.SubmittedAt</a>
            }
        }
        else
        {
            <text>Loading...</text>
        }
    </div>

</div>


@code {

    [Parameter]
    public Guid UserId { get; set; } = Guid.Empty;

    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationState).User;

        if(UserId == Guid.Empty && user.Identity.IsAuthenticated)
        {
            var claim = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier);            
            _profileViewModel.UserId = Guid.Parse(claim?.Value);            
        }
        else if(UserId != Guid.Empty)
        {
            _profileViewModel.UserId = UserId;           
        }
        
        await _profileViewModel.GetProfileData();
        await _profileViewModel.GetBanner();
    }
}
