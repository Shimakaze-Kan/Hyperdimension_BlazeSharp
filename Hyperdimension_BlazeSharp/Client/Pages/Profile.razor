@page "/profile"
@page "/profile/{userId:guid}"
@layout NoPaddingLayout
@using Hyperdimension_BlazeSharp.Client.ViewModels
@inject IProfileViewModel _profileViewModel
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="bg-banner" style="background-image: url('../img/@_profileViewModel.Banner')" />
<div class="d-flex flex-column px-4">
    <div class="p-2 d-flex flex-column flex-sm-row">
        <img src="@(_profileViewModel.UserProfile?.AvatarUrl)" class="rounded mx-sm-0 mx-auto avatar" alt="...">
        <div class="p-2 ml-2">
            <span class="badge bg-dark text-white bol">Points: @_profileViewModel.UserProfile?.Points</span>
            <h4 class="bg-lightergrey rounded p-2 my-auto text-center">@(_profileViewModel.UserProfile?.Email)</h4>
        </div>
    </div>

    @if (_profileViewModel.UserProfile?.About is not null)
    {
        <div class="container-fluid py-2 my-3 rounded bg-lightergrey">
            <span class="pb-2 h3">About</span><br />
            <span>@_profileViewModel.UserProfile?.About</span>
        </div>
    }
    <button @onclick="UpdatePreferences">update</button>
    <nav>
        <div class="nav nav-tabs" id="nav-tab" role="tablist">
            <button class="nav-link active" id="nav-task-history-tab" @onclick="@(() => ChangeTab("nav-task-history-tab"))" type="button" role="tab">History</button>
            <button class="nav-link" id="nav-test-tab" @onclick="@(() => ChangeTab("nav-test-tab"))" type="button" role="tab">Test</button>
        </div>
    </nav>
    <div class="tab-content" id="nav-tabContent">
        <div class="tab-pane show active" id="nav-task-history" role="tabpanel">
            <ClickableList Tasks="@_profileViewModel.UserProfile?.Tasks" />
        </div>
        <div class="tab-pane" id="nav-test" role="tabpanel">...</div>
    </div>    

</div>


@code {

    [Parameter]
    public Guid UserId { get; set; } = Guid.Empty;

    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }

    private Task<IJSObjectReference> _module;
    private Task<IJSObjectReference> Module => _module ??= JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/show-profile-tab.js").AsTask();

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationState).User;

        if(UserId == Guid.Empty && user.Identity.IsAuthenticated)
        {
            var claim = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier);
            _profileViewModel.UserId = Guid.Parse(claim?.Value);
        }
        else if(UserId != Guid.Empty)
        {
            _profileViewModel.UserId = UserId;
        }

        await _profileViewModel.GetProfileData();
        await _profileViewModel.GetBanner();
    }

    async Task ChangeTab(string tabNavId)
    {
        var module = await Module;
        await module.InvokeVoidAsync("showProfileTab", tabNavId, tabNavId.Remove(tabNavId.Length - 4));
    }

    async Task UpdatePreferences()
    {
        _profileViewModel.UserPreferences = new UserPreferences()
        {
            About = "123"
        };

        var response = await _profileViewModel.UpdatePreferences();

        if(response.IsSuccessStatusCode)
        {
            //TODO
            Console.WriteLine("success");
        }
        else
        {
            //TODO
            Console.WriteLine("error");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_module != null)
        {
            var module = await _module;
            await module.DisposeAsync();
        }
    }
}
