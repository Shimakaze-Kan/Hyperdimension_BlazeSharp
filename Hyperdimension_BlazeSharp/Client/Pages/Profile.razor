@page "/profile"
@page "/profile/{userId:guid}"
@layout NoPaddingLayout
@using Hyperdimension_BlazeSharp.Client.ViewModels
@inject IProfileViewModel _profileViewModel
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@implements IAsyncDisposable


<PropertyHasChangedListener ViewModel="_profileViewModel">    
    <div class="bg-banner" style="background-image: url('../img/@_profileViewModel.Banner')" />
    <div class="d-flex flex-column px-4">
        <div class="p-2 d-flex flex-column flex-sm-row">
            <img src="@(_profileViewModel.UserProfile?.AvatarUrl)" class="rounded mx-sm-0 mx-auto avatar" alt="...">
            <div class="p-2 ml-2">
                <span class="badge bg-dark text-white bol">Points: @_profileViewModel.UserProfile?.Points</span>
                @if (showBadges)
                {
                    <a href="@("folk/" + _profileViewModel.UserProfile?.AchievedStories.First().StoryId)" class="badge bg-info text-dark">@_profileViewModel.UserProfile?.AchievedStories.First().Title</a>
                }
                <h4 class="bg-lightergrey rounded p-2 my-auto text-center">@(_profileViewModel.UserProfile?.Email)</h4>
            </div>

            <button type="button" class="btn btn-outline-secondary ml-auto h-25"
                    @onclick="OpenUpdatePreferencesDialog"
                    hidden="@(!isOwner)">
                <span class="oi oi-cog" /> Options
            </button>

        </div>

        @if (!string.IsNullOrEmpty(_profileViewModel.UserProfile?.About))
        {
            <div class="container-fluid py-2 my-3 rounded bg-lightergrey">
                <span class="pb-2 h3">About</span><br />
                <span>@_profileViewModel.UserProfile.About</span>
            </div>
        }

        <nav>
            <div class="nav nav-tabs" id="nav-tab" role="tablist">
                <button class="nav-link active" id="nav-task-history-tab" @onclick="@(() => ChangeTab("nav-task-history-tab"))" type="button" role="tab">History</button>
                <button class="nav-link" id="nav-test-tab" @onclick="@(() => ChangeTab("nav-test-tab"))" type="button" role="tab">Test</button>
            </div>
        </nav>
        <div class="tab-content" id="nav-tabContent">
            <div class="tab-pane show active" id="nav-task-history" role="tabpanel">
                <ClickableList Tasks="@_profileViewModel.UserProfile?.Tasks" />
            </div>
            <div class="tab-pane" id="nav-test" role="tabpanel">...</div>
        </div>

    </div>
    @if (isShowingUpdatePreferencesDialog)
    {
        <UpdatePreferencesDialog UserPreferences="_profileViewModel.UserPreferences"
                                 OnConfirm="ConfirmUpdatePreferencesDialog"
                                 OnCancel="CancelUpdatePreferencesDialog" 
                                 OnInputFileChange="_profileViewModel.OnInputFileChange" />
    }
</PropertyHasChangedListener>


@code {

    [Parameter]
    public Guid UserId { get; set; } = Guid.Empty;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    private Task<IJSObjectReference> _module;
    private Task<IJSObjectReference> Module => _module ??= JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/show-profile-tab.js").AsTask();
    private bool isShowingUpdatePreferencesDialog = false;
    private bool isOwner = false;
    private bool showBadges = false;

    protected override async Task OnParametersSetAsync()
    {
        if (UserId != _profileViewModel.UserId)
        {
            var user = (await AuthenticationState).User;

            if (UserId == Guid.Empty && user.Identity.IsAuthenticated)
            {
                var claim = user.FindFirst("nameid");
                _profileViewModel.UserId = Guid.Parse(claim?.Value);
                isOwner = true;
                await _profileViewModel.GetProfileData();
            }
            else if (UserId != Guid.Empty)
            {
                _profileViewModel.UserId = UserId;
                isOwner = (UserId == Guid.Parse(user.FindFirst("nameid")?.Value ?? Guid.Empty.ToString())) || (user.IsInRole("admin"));
                await _profileViewModel.GetProfileData();
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }

            await _profileViewModel.GetBanner();

            showBadges = _profileViewModel.UserProfile?.AchievedStories?.Any() ?? false;
        }
    }

    async Task ChangeTab(string tabNavId)
    {
        var module = await Module;
        await module.InvokeVoidAsync("showProfileTab", tabNavId, tabNavId.Remove(tabNavId.Length - 4));
    }

    void OpenUpdatePreferencesDialog()
    {
        _profileViewModel.UserPreferences = new() { UserId = _profileViewModel.UserId.GetValueOrDefault(), About = _profileViewModel.UserProfile.About };
        isShowingUpdatePreferencesDialog = true;
    }

    async Task ConfirmUpdatePreferencesDialog()
    {
        isShowingUpdatePreferencesDialog = false;

        var user = (await AuthenticationState).User;

        HttpResponseMessage response;

        if (user.IsInRole("admin"))
        {
            response = await _profileViewModel.UpdatePreferencesForce();
        }
        else
        {
            response = await _profileViewModel.UpdatePreferences();
        }

        if (response.IsSuccessStatusCode)
        {
            //TODO
            Console.WriteLine("success");
        }
        else
        {
            //TODO
            Console.WriteLine("error");
        }
    }

    void CancelUpdatePreferencesDialog()
    {
        isShowingUpdatePreferencesDialog = false;
    }

    public async ValueTask DisposeAsync()
    {
        if (_module != null)
        {
            var module = await _module;
            await module.DisposeAsync();
        }
    }
}
