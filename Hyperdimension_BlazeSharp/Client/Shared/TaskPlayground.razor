@inject HttpClient HttpClient


@if (tasks is not null)
{
    <h4>@tasks.Title</h4>
}

<div class="row">
    <div class="@editorPosition col-12">
        @if (markDownInstruction is null)
        {
            <h3>Loading...</h3>
        }
        else
        {
            @((MarkupString) markDownInstruction)
        }
    </div>
    <div class="@editorPosition col-12">
        <div class="row mb-2">
            <div class="col">
                <select class="custom-select" @onchange="ChangeTheme">
                    <option value="vs">Visual Studio</option>
                    <option value="vs-dark">Visual Studio Dark</option>
                    <option value="hc-black">High Contrast Black</option>
                </select>
            </div>
            <div class="col">
                <button type="button" class="btn btn-outline-orange float-right" @onclick="Execute">Execute</button>
                <button type="button" class="btn btn-outline-orange float-right d-md-block d-none mr-1" @onclick="ChangeEditorPosition">Change Position</button>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <MonacoEditor Id="monaco-editor" @ref="_editor" ConstructionOptions="EditorConstructionOptions" />
            </div>
        </div>
        <div class="row w-100">
            <p>Output:</p>
            <div class="col border-top">
                @foreach (var item in output)
                {
                    @item <br />
                }
            </div>
        </div>
    </div>
</div>

<div class="fixed-bottom d-flex" style="background-color: @(mode == 0 ? "#3A66A7" : "#FF9912"); color: white">
    <label class="mr-auto pl-2 mb-0">
        @mode.ToString() mode
    </label>
    @if (tasks?.Points is not null)
    {
        <label class="ml-auto pr-2 mb-0">
            Points: @tasks.Points
        </label>
    }
</div>


@code {
    [Parameter] public Guid Guid { get; set; }

    private List<string> output = new();
    private Tasks tasks;
    private Mode mode;

    private string editorPosition = "col-md-6";

    private string markDownInstruction;
    private MonacoEditor _editor { get; set; }
    private string _code;

    protected override async Task OnInitializedAsync()
    {
        tasks = await HttpClient.GetFromJsonAsync<Tasks>($"tasks/{Guid}");

        markDownInstruction = Markdig.Markdown.ToHtml(tasks.Description);
        await _editor.SetValue(tasks.InitialCode);
    }

    private void Execute()
    {
        output.Add("Hello World!");
    }

    private void ChangeEditorPosition()
    {
        editorPosition = (editorPosition == "col-md-6" ? "col-md-12" : "col-md-6");
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "csharp",
            Value = string.Empty
        };
    }

    private async Task ChangeTheme(ChangeEventArgs e)
    {
        await MonacoEditor.SetTheme(e.Value.ToString());
    }

    private async Task GetValue()
    {
        _code = await _editor.GetValue();
    }

    enum Mode
    {
        Tutorial,
        Adventure
    }
}
