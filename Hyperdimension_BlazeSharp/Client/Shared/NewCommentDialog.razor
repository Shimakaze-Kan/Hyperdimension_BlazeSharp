<div class="dialog-container">
    <div class="dialog">
        <EditForm Model="CommentCreateRequest">
            <div class="form-group p-2">
                @if (ProfanityScannerResponse.IsInappropriate)
                {
                    <span style="background: red; color: white">
                        Your comment may contain offensive words, consider replacing the highlighted words with something else.
                    </span>
                    @if (ProfanityScannerResponse.CodeMd.Length > 0)
                    {
                        <div>
                            <label>Code:</label>
                            <br />
                            <MarkupPanel Text="@ProfanityScannerResponse.CodeMd" />
                        </div>
                    }
                    <div>
                        <label>Text:</label>
                        <br />
                        @((MarkupString)ProfanityScannerResponse.TextMd)
                    </div>
                }
                else
                {
                    <div>
                        <ValidationMessage For="() => CommentCreateRequest.Text" />
                        <h5>Comment:</h5>
                        <InputTextArea class="form-control" @bind-Value="CommentCreateRequest.Text" rows="3" />
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" @bind-value="CommentCreateRequest.AddLastSubmittedVersion" type="checkbox" id="flexCheckDefault">
                        <label class="form-check-label" for="flexCheckDefault">
                            Would ya like to append your last submitted version of solution?
                        </label>
                    </div>
                }
            </div>
            <DataAnnotationsValidator />
        </EditForm>
        <div class="dialog-buttons">
            @if (!ProfanityScannerResponse.IsInappropriate)
            {
                <button class="btn btn-outline-secondary mr-auto" @onclick="OnCancel">Cancel</button>
                <button class="btn btn-outline-orange ml-auto" @onclick="OnConfirm">Confirm</button>
            }
            else
            {
                <button class="btn btn-outline-secondary mr-auto" @onclick="BackToEdit">Edit</button>
                <button class="btn btn-outline-orange ml-auto" @onclick="ForceSend">Send anyway</button>
            }
        </div>
    </div>
</div>
@code {

    [Parameter]
    public CommentCreateRequest CommentCreateRequest { get; set; }

    [Parameter]
    public ProfanityScannerResponse ProfanityScannerResponse { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback OnConfirm { get; set; }

    [Parameter]
    public ValueWrapper<bool> SendInappropriate { get; set; }

    private void BackToEdit()
    {
        ProfanityScannerResponse.IsInappropriate = false;
    }

    private async Task ForceSend()
    {
        SendInappropriate.Value = true;
        await OnConfirm.InvokeAsync();
    }

}
